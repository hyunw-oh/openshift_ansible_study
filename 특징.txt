특징
===
장점
===
s2i
---
특징적 기능으로는 s2i라는 기능이 있는데
카탈로그에서 지원하는 web/was server를 고르고
해당하는 web/was에 올라갈 코드를 포함한 git 주소를 입력만 하면 바로
서버위에 소스가 포함된 컨테이너를 빌드한다.
빌드시에 webhook이라는 api(url형태)를 알려주는데

이 url을 깃의 webhook에 등록하게 되면
git에서 소스를 업데이트하면 자동으로 
컨테이너의 소스를 업데이트해서 다시 빌드해준다.
(이 때 무중단으로 이와같은 서비스가 가능하다. 이는 오픈시프트의 내부 네트워크 구조와 replica라는 기능 덕분이다.)

단점이라면은 기존의 레거시한 방법으로는
소스를 올리는게 불가능하다.
일반적인 인프라 서버에서는 먼저 web/was를 구축하고 그 위에 소스를 올려서 구동하고
부분적인 수정들도 직접 소스에서 할 수 있으니 편리하겠지만 이런 기능은 기대할 수 없다.
물론 카탈로그에서 제공하는 방식으로 컨테이너를 띄우고 그 컨테이너의 배시에 들어가서
직접 소스를 바꾸고 서버를 리스타트해서 소스 변경을 적용 할 수 있겠지만
서버가 리스타트 되는 순간 컨테이너가 죽었다고 생각해서 바로 에러를 내면서 컨테이너를 재생성한다.
이런 특징들이 불편하긴 하지만, 사실 서버가 무중단되고 안정적으로 구동되기 위한 쿠버네티스의 컨테이너 관리방식이다.
(사실 이런 방식이 어색해서 그렇지 불편한것은 아니다. 오히려 소스관리를 깃에서만 하도록 제한하니 관리가 명확해지고 webhook을 통해 자동으로 배포까지 해주니 오히려 편리하기 까지하다.
git에서 branch 를 따서 개발과 배포용 git을 따로 관리하도록해서 개발이 완료된 시점에만 배포용 git에 커밋을 하자. 그러면 배포까지 자동으로 되니 devops의 실현이다.)

카탈로그에 있는 앱외에는 외부에서 임포트해서 쓰거나
아니면 터미널에서 오픈시프트가 사용하는 도커레지스트리에 직접 접속해서 사용하려는 도커 이미지를 푸시하는 방법이 있다.
oc new-app '방금푸시한앱' 과 같은 방식으로 쓸 수도 있다.